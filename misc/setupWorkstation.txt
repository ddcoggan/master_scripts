### setting up ubuntu workstation ###

1. install ubuntu operating system


2. update system to latest:
sudo apt update
sudo apt upgrade

3. install and set up ssh
sudo apt install ssh
ssh-keygen -t ed25519 -C "david"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519

4. install different python versions
sudo apt install wget build-essential libncursesw5-dev libssl-dev \
libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt install python3.7 python3.7-distutils python3.8 python3.8-distutils python3.9 python3.9-distutils python3.10 python3.10-distutils python3.11 python3.11-distutils python3.12

5. install gcc and cuda (see instructions at https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html)
# these are the instructions as of 23-06-01
sudo apt install build-essential
sudo apt-get install linux-headers-$(uname -r)
sudo apt-key del 7fa2af80
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/cuda-repo-ubuntu2204-12-1-local_12.1.1-530.30.02-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu2204-12-1-local_12.1.1-530.30.02-1_amd64.deb
sudo cp /var/cuda-repo-ubuntu2204-12-1-local/cuda-*-keyring.gpg /usr/share/keyrings/
sudo apt-get update
sudo apt-get -y install cuda
reboot


Steps 1-5 are performed by setup.sh, next steps are manual:

6. install pycharm and matlab (can be done through ubuntu software app / mathworks website)

7. add necessary datasets under ~/Datasets/

8. make a project directory under ~/<your name>/


### SYNOLOGY BACK UP ###
# set up passwordless ssh into synology with this guide:
https://stamler.ca/enable-passwordless-ssh-on-synology-dsm6/

# ssh into synology
ssh david@DDCNAS.local

# sync data manually on finn with mirrored folder on synology NAS
rsync -aL --copy-links --progress /home/tonglab/david david@DDCNAS.local:/volume1/NetBackup/ # for progress bar on each file
rsync -avL --copy-links /home/tonglab/david david@DDCNAS.local:/volume1/NetBackup/ # for just listing each file

# sync data automatically on finn each day with mirrored folder on synology NAS
(crontab -l; echo "00 2 * * * rsync -aL --copy-links --delete --ignore-errors /home/tonglab/david david@DDCNAS.local:/volume1/NetBackup/ > /dev/null 2>&1";) | crontab

# record system log info daily
(crontab -l; echo "58  23 * * * /bin/sh /home/tonglab/david/master_scripts/misc/sar_report.sh";) | crontab


### MOUNT DRIVES AT OTHER WORKSTATIONS

sudo mkdir /home/tonglab/david
sudo apt install cifs-utils smbclient
sudo mount.smb3 //10.32.132.238/ddc /home/tonglab/david -o user=tonglab,uid=tonglab


### clone a virtual environment ###

Do the following steps in the source environment:

    1. open a terminal (maybe in pycharm)
    2. ensure the correct python and pip executables are selected.
    	'which python' should print the path to your python executable in your virutal env.
    	'which pip' should print the path to your pip executable in your virutal env.
    3. 'pip freeze > requirements.txt' will make a txt file with all the package names and versions
    

On the other PC:

    1. create new virtual environment (same version is the safest play)
    2. repeat the previous step 2.
    3. copy the requirements.txt from the original env. to the same location in this env.
    4. 'pip install -r requirements.txt' will install the exact same set of packages.


### MATLAB TOOLS ###
SPM
MrTools
PsychToolbox
NORDIC_Raw
analyzePRF


### NEURO TOOLS ###
FSL and Freesurfer
TONGLAB WIKI: https://sites.google.com/view/tong-lab-wiki/
sudo apt install meshlab



### BASH PROFILE ADDITIONS
FSLDIR=${HOME}/fsl
. ${FSLDIR}/etc/fslconf/fsl.sh
PATH=${FSLDIR}/bin:${PATH}
export FREESURFER_HOME=/usr/local/freesurfer/7.3.2
export SUBJECTS_DIR=$HOME/david/subjects/freesurfer
source $FREESURFER_HOME/SetUpFreeSurfer.sh
export FS_LICENSE=$FREESURFER_HOME/license.txt

alias refresh="source $HOME/.bashrc"
alias matlab="/usr/local/MATLAB/R2022b/bin/matlab"


### GIT ###
sudo apt install git

# to use git for version control and not just cloning repos

# config git
git config --global user.email "ddcoggan@icloud.com"
git config --global user.name "ddcoggan"

# github setup
sudo apt install curl
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
&& sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
&& sudo apt update \
&& sudo apt install gh -y
gh auth login
** follow steps **

# always clone as ssh not http, eg:
git clone git@github.com:ddcoggan/master_scripts
git clone git@github.com:ddcoggan/p022_occlusion

ssh -T git@github.com # check if you get asked for password and weren't expecting it, may need to hit 'yes' when prompted
refresh # try if you are still asked for a password and werent expecting it

# start new repo
git init -b main
git add journal && git commit -m "initial commit"
gh repo create p019_objectSpace --private --source=. --remote=upstream --push


# for my workstation
# git commands
alias multipull="find /mnt/HDD12TB/projects/. -maxdepth 2 -name .git -type d | rev | cut -c 6- | rev | xargs -I {} git -C {} pull;
find $HOME/Dave/. -maxdepth 2 -name .git -type d | rev | cut -c 6- | rev | xargs -I {} git -C {} pull"

alias multipush="printf '\n\nmasterScripts\n'; cd $HOME/Dave/masterScripts; git add .; git commit -m '$(date)'; git push;
printf '\n\np022_occlusion\n'; cd /mnt/HDD12TB/projects/p022_occlusion; git add DNN/analysis/scripts/.; git commit -m '$(date)'; git push;
printf '\n\np021_convParamSpace\n'; cd /mnt/HDD12TB/projects/p021_convParamSpace; git add scripts/.; git commit -m '$(date)'; git push;
printf '\n\np019_objectSpace\n'; cd /mnt/HDD12TB/projects/p019_objectSpace; git add analysis/scripts/.; git commit -m '$(date)'; git push;"

# for all other workstations
# git commands
alias multipull="find $HOME/Dave/. -maxdepth 2 -name .git -type d | rev | cut -c 6- | rev | xargs -I {} git -C {} pull"

alias multireset="printf '\n\nmasterScripts\n'; cd $HOME/Dave/masterScripts; git reset --hard origin/main;
printf '\n\np022_occlusion\n'; cd $HOME/Dave/p022_occlusion; git reset --hard origin/main;"

alias multipush="printf '\n\nmasterScripts\n'; cd $HOME/Dave/masterScripts; git add .; git commit -m '$(date)'; git push;
printf '\n\np022_occlusion\n'; cd $HOME/Dave/p022_occlusion; git add DNN/analysis/scripts/.; git commit -m '$(date)'; git push;"


### CONNECT TO YNIC VPN ###
open terminal in /home/dave/ynic-vpn-config
sudo openvpn --config ynic.conf
username:ddc506
password: *******bsc
x2goclient --broker-url=//remote.ynic.york.ac.uk/

### PSYCHOPY ###
# install stand-alone psychopy (needed for configuring monitors)
# start a new Python 3.8 environment
# if CPU arch is arm64 (i.e. apple silicon):
	# ensure python version with x86-64 architectureis is downloaded manually
	# that architecture is set to x86-64
	env /usr/bin/arch -x86_64 /bin/zsh --login
# ensure that pip/ip3/python/python3 still point to executables in project venv
# install psychopy with:
pip install psychopy

# matlab engine
follow instructions here: https://www.mathworks.com/help/matlab/matlab_external/install-the-matlab-engine-for-python.html
# at last install, this failed with R2023a when using python 3.11, but 3.10 worked
when installing from command line in pycharm, the installer will use whatever the default python installer is when you initialize a terminal, even if 'which python' points to a different version, e.g. the one in your venv. To fix this, temporarily change your bashrc file to alias python to your venv python before running the 'python -m pip install .' command.

# docker
https://docs.docker.com/engine/install/ubuntu/
Follow steps, and also the steps here:
https://docs.docker.com/engine/install/linux-postinstall/
to be able to run docker without sudo priveleges (necessary for calling docker inside python scripts)




